# Full path and filename to XML file were log data
# will be written to
logcollector=/tmp/pdf-fonts.xml

# Full path and filename of jHove's executable script
# (command line version, not GUI)
jhove=/home/fish/HiS/Research/OSS/jhove/jhove

# Full path and filename of veraPDF's executable script
verapdf=/home/fish/HiS/Research/OSS/verapdf/verapdf

# Full path and filename to a the Java class
#  PdfBoxValidator.class
pdfboxvalidator=/home/fish/HiS/Research/OSS/pdfbox/PdfBoxValidator.class

# Full path and filename to DPF Manager's JAR file
# (most likely called 'DPF Manager-jfx.jar')
dpfmanagerjar=/home/fish/HiS/Research/OSS/DPFManager/DPF Manager-jfx.jar

# Full path and filename of Callas pdfaPilots's executable script
# Requires either an expensive commercial license or a
# 30-day evaluation copy
#callaspdfapilot=/home/fish/HiS/Research/OSS/callas_pdfaPilot_CLI_x64_Linux_6-2-256/pdfaPilot

# If Adobe Preflight has been run earlier and was
# configured to write report logs in XML format,
# provide the report logs' directory here. It will
# be searched recursively. The report XML files'
# names must correspond to the PDF files' names:
# abc.pdf  ->  abc_report.xml
adobepreflightreportdirectory=/tmp/adobe-preflight-report

# Directory where Qoppa's jPDFPreflight .jar file
# and license key is located. The Bash script
# ValidatePDFA.sh will be executed, which in its turn
# runs code from ValidatePDFA.class (.java source
# code is provided)
qoppajpdfpreflightdirectory=/home/fish/HiS/Research/OSS/DocumentScanner/DocScan/qoppa-jpdfpreflight

# Full path and filename of PDF Tool's 3-Height PDF Validator
# executable, followed by a verticale pipe symbol, followed
# by the license key which a sequence of alpha-numeric characters
# interleaved with dashes
threeheightsvalidatorshell=/home/fish/HiS/Research/OSS/DocumentScanner/DocScan/pdftools-3height/bin/x64/pdfvalidator|1234-ABCDE-1234-DEFGH-0000

# Control if text has to be extracted and how the text
# is to be processed. Possible values include:
#  none       No text extraction
#  length     Extract text, but only record length
#  fulltext   Extract text and store it in logs
#  aspell     Extract text, store it, and guess language
#             via 'aspell'
textExtraction=none

# Control if embedded files or images of documents
# such as JPEG images in PDF documents shall be analyzed
# as well.
# Note: ZIP files' content will always be analyzed.
embeddedfilesanalysis=false

# Apply PDF validator only to a file if its XMP PDF/A
# metadata looks reasonable
validateonlypdfafiles=true

# Control if PDF files claiming to be PDF/A-1a or 'better'
# should be 'downgraded' to PDF/A-1b by changing at most
# two bytes in the metadata of a temporary copy of said PDF
# file. Requires that the metadata is not compressed
# (that is a requirement for PDF/A in any case).
downgradetopdfa1b=true

# If validating PDF files for PDF/A conformance, which
# PDF/A part and level should be checked for?
# Possible values include
#  auto          Let each validator choose itself, e.g.
#                based on each PDF file's metadata
#  pdfa1b        Enforce PDF/A-1b where possible
# Other PDF/A parts and levels may get supported in the
# future.
pdfapartlevel=pdfa1b

# Filter for files matching a certain pattern.
# Multiple patterns are separated by pipe symbols
# ('|'). File patterns are not regular expressions,
# instead they rather work like file patterns in
# a POSIX shell.
filter=*.pdf.xz|*.pdf|*.jpg|*.jpeg|*.jpe|*.jfif|*.zip|*.tif|*.tiff

# Directory where to start searching for files for
# analysis. The search in the file system will be
# recursive.
# This confguration option is mutual exclusive with
#  webcrawler, searchenginegoogle, searchenginebing,
#  searchenginespringerlink, filefinderlist,
#  fromlogfilefilefinder, fromlogfiledownloader,
#  urldownloader, directorymonitor
filesystemscan=/tmp/pdf

# Which unit used to analyze found files. Possible
# values include:
#  multiplexer   Chooses more specific analyzer based
#                on filename extension; handles compressed
#                files transparently (xz, gz, bz2, lzma)
# The multiplexer uncompresses found files transparently
# and delegates the actual analysis to one of the following
# specific analyzers which can be chosen directly here as well:
#  odf           Apply OpenDocument Format analysis on
#                every file found matching the filter
#  openxml       Apply OfficeOpenXML analysis on every
#                file found matching the filter
#  pdf           Apply PDF analysis on every file found
#                matching the filter
#  compoundbinary  Apply analysis for legacy Microsoft
#                Office formats on every file found
#                matiching the filter
#  zip           Scan .zip files' content; found files will be
#                delegated to the multiplexer
#  jpeg          Analyze JPEG photo/image files
#  jp2           Analyze JPEG2000 photo/image files
#  tiff          Analyze TIFF photo/image files
# Note 1: Only 'multiplexer' can handle compressed files
# Note 2: It is a safe choice to pick 'multiplexer' here
#         and specify a filter above.
fileanalyzer=multiplexer

